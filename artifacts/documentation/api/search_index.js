var search_data = {
    'index': {
        'searchIndex': ["icecave","icecave\\dialekt","icecave\\dialekt\\ast","icecave\\dialekt\\evaluator","icecave\\dialekt\\parser","icecave\\dialekt\\parser\\exception","icecave\\dialekt\\renderer","icecave\\dialekt\\renderer\\exception","icecave\\dialekt\\ast\\abstractexpression","icecave\\dialekt\\ast\\abstractpolyadicexpression","icecave\\dialekt\\ast\\emptyexpression","icecave\\dialekt\\ast\\expressioninterface","icecave\\dialekt\\ast\\logicaland","icecave\\dialekt\\ast\\logicalnot","icecave\\dialekt\\ast\\logicalor","icecave\\dialekt\\ast\\nodeinterface","icecave\\dialekt\\ast\\pattern","icecave\\dialekt\\ast\\patternchildinterface","icecave\\dialekt\\ast\\patternliteral","icecave\\dialekt\\ast\\patternwildcard","icecave\\dialekt\\ast\\tag","icecave\\dialekt\\ast\\visitorinterface","icecave\\dialekt\\evaluator\\evaluationresult","icecave\\dialekt\\evaluator\\evaluator","icecave\\dialekt\\evaluator\\evaluatorinterface","icecave\\dialekt\\evaluator\\expressionresult","icecave\\dialekt\\packageinfo","icecave\\dialekt\\parser\\abstractparser","icecave\\dialekt\\parser\\exception\\parseexception","icecave\\dialekt\\parser\\expressionparser","icecave\\dialekt\\parser\\lexer","icecave\\dialekt\\parser\\lexerinterface","icecave\\dialekt\\parser\\listparser","icecave\\dialekt\\parser\\parserinterface","icecave\\dialekt\\parser\\token","icecave\\dialekt\\renderer\\exception\\renderexception","icecave\\dialekt\\renderer\\expressionrenderer","icecave\\dialekt\\renderer\\rendererinterface","icecave\\dialekt\\renderer\\treerenderer","icecave\\dialekt\\ast\\abstractexpression::source","icecave\\dialekt\\ast\\abstractexpression::sourceoffset","icecave\\dialekt\\ast\\abstractexpression::hassource","icecave\\dialekt\\ast\\abstractexpression::setsource","icecave\\dialekt\\ast\\abstractpolyadicexpression::__construct","icecave\\dialekt\\ast\\abstractpolyadicexpression::add","icecave\\dialekt\\ast\\abstractpolyadicexpression::children","icecave\\dialekt\\ast\\emptyexpression::accept","icecave\\dialekt\\ast\\expressioninterface::source","icecave\\dialekt\\ast\\expressioninterface::sourceoffset","icecave\\dialekt\\ast\\expressioninterface::hassource","icecave\\dialekt\\ast\\logicaland::accept","icecave\\dialekt\\ast\\logicalnot::__construct","icecave\\dialekt\\ast\\logicalnot::child","icecave\\dialekt\\ast\\logicalnot::accept","icecave\\dialekt\\ast\\logicalor::accept","icecave\\dialekt\\ast\\nodeinterface::accept","icecave\\dialekt\\ast\\pattern::__construct","icecave\\dialekt\\ast\\pattern::add","icecave\\dialekt\\ast\\pattern::children","icecave\\dialekt\\ast\\pattern::accept","icecave\\dialekt\\ast\\patternliteral::__construct","icecave\\dialekt\\ast\\patternliteral::string","icecave\\dialekt\\ast\\patternliteral::accept","icecave\\dialekt\\ast\\patternwildcard::accept","icecave\\dialekt\\ast\\tag::__construct","icecave\\dialekt\\ast\\tag::name","icecave\\dialekt\\ast\\tag::accept","icecave\\dialekt\\ast\\visitorinterface::visitlogicaland","icecave\\dialekt\\ast\\visitorinterface::visitlogicalor","icecave\\dialekt\\ast\\visitorinterface::visitlogicalnot","icecave\\dialekt\\ast\\visitorinterface::visittag","icecave\\dialekt\\ast\\visitorinterface::visitpattern","icecave\\dialekt\\ast\\visitorinterface::visitpatternliteral","icecave\\dialekt\\ast\\visitorinterface::visitpatternwildcard","icecave\\dialekt\\ast\\visitorinterface::visitemptyexpression","icecave\\dialekt\\evaluator\\evaluationresult::__construct","icecave\\dialekt\\evaluator\\evaluationresult::ismatch","icecave\\dialekt\\evaluator\\evaluationresult::resultof","icecave\\dialekt\\evaluator\\evaluator::__construct","icecave\\dialekt\\evaluator\\evaluator::evaluate","icecave\\dialekt\\evaluator\\evaluator::visitlogicaland","icecave\\dialekt\\evaluator\\evaluator::visitlogicalor","icecave\\dialekt\\evaluator\\evaluator::visitlogicalnot","icecave\\dialekt\\evaluator\\evaluator::visittag","icecave\\dialekt\\evaluator\\evaluator::visitpattern","icecave\\dialekt\\evaluator\\evaluator::visitpatternliteral","icecave\\dialekt\\evaluator\\evaluator::visitpatternwildcard","icecave\\dialekt\\evaluator\\evaluator::visitemptyexpression","icecave\\dialekt\\evaluator\\evaluatorinterface::evaluate","icecave\\dialekt\\evaluator\\expressionresult::__construct","icecave\\dialekt\\evaluator\\expressionresult::expression","icecave\\dialekt\\evaluator\\expressionresult::ismatch","icecave\\dialekt\\evaluator\\expressionresult::matchedtags","icecave\\dialekt\\evaluator\\expressionresult::unmatchedtags","icecave\\dialekt\\parser\\abstractparser::__construct","icecave\\dialekt\\parser\\abstractparser::wildcardstring","icecave\\dialekt\\parser\\abstractparser::setwildcardstring","icecave\\dialekt\\parser\\abstractparser::capturesource","icecave\\dialekt\\parser\\abstractparser::setcapturesource","icecave\\dialekt\\parser\\abstractparser::parse","icecave\\dialekt\\parser\\expressionparser::__construct","icecave\\dialekt\\parser\\expressionparser::logicalorbydefault","icecave\\dialekt\\parser\\expressionparser::setlogicalorbydefault","icecave\\dialekt\\parser\\lexer::lex","icecave\\dialekt\\parser\\lexerinterface::lex","icecave\\dialekt\\parser\\listparser::parseasarray","icecave\\dialekt\\parser\\parserinterface::parse","icecave\\dialekt\\parser\\token::__construct","icecave\\dialekt\\parser\\token::typedescription","icecave\\dialekt\\renderer\\expressionrenderer::__construct","icecave\\dialekt\\renderer\\expressionrenderer::render","icecave\\dialekt\\renderer\\expressionrenderer::visitlogicaland","icecave\\dialekt\\renderer\\expressionrenderer::visitlogicalor","icecave\\dialekt\\renderer\\expressionrenderer::visitlogicalnot","icecave\\dialekt\\renderer\\expressionrenderer::visittag","icecave\\dialekt\\renderer\\expressionrenderer::visitpattern","icecave\\dialekt\\renderer\\expressionrenderer::visitpatternliteral","icecave\\dialekt\\renderer\\expressionrenderer::visitpatternwildcard","icecave\\dialekt\\renderer\\expressionrenderer::visitemptyexpression","icecave\\dialekt\\renderer\\rendererinterface::render","icecave\\dialekt\\renderer\\treerenderer::render","icecave\\dialekt\\renderer\\treerenderer::visitlogicaland","icecave\\dialekt\\renderer\\treerenderer::visitlogicalor","icecave\\dialekt\\renderer\\treerenderer::visitlogicalnot","icecave\\dialekt\\renderer\\treerenderer::visittag","icecave\\dialekt\\renderer\\treerenderer::visitpattern","icecave\\dialekt\\renderer\\treerenderer::visitpatternliteral","icecave\\dialekt\\renderer\\treerenderer::visitpatternwildcard","icecave\\dialekt\\renderer\\treerenderer::visitemptyexpression"],
        'info': [["Icecave","","Icecave.html","","",3],["Icecave\\Dialekt","","Icecave\/Dialekt.html","","",3],["Icecave\\Dialekt\\AST","","Icecave\/Dialekt\/AST.html","","",3],["Icecave\\Dialekt\\Evaluator","","Icecave\/Dialekt\/Evaluator.html","","",3],["Icecave\\Dialekt\\Parser","","Icecave\/Dialekt\/Parser.html","","",3],["Icecave\\Dialekt\\Parser\\Exception","","Icecave\/Dialekt\/Parser\/Exception.html","","",3],["Icecave\\Dialekt\\Renderer","","Icecave\/Dialekt\/Renderer.html","","",3],["Icecave\\Dialekt\\Renderer\\Exception","","Icecave\/Dialekt\/Renderer\/Exception.html","","",3],["AbstractExpression","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/AbstractExpression.html","","A base class providing common functionality for expressions.",1],["AbstractPolyadicExpression","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/AbstractPolyadicExpression.html"," < AbstractExpression","A base class providing common functionality for polyadic",1],["EmptyExpression","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/EmptyExpression.html"," < AbstractExpression","An AST node that represents an empty expression.",1],["ExpressionInterface","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/ExpressionInterface.html","","An AST node that is an expression.",1],["LogicalAnd","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/LogicalAnd.html"," < AbstractPolyadicExpression","An AST node that represents the logical AND operator.",1],["LogicalNot","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/LogicalNot.html"," < AbstractExpression","An AST node that represents the logical NOT operator.",1],["LogicalOr","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/LogicalOr.html"," < AbstractPolyadicExpression","An AST node that represents the logical OR operator.",1],["NodeInterface","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/NodeInterface.html","","An AST node.",1],["Pattern","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/Pattern.html"," < AbstractExpression","An AST node that represents a pattern-match expression.",1],["PatternChildInterface","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/PatternChildInterface.html","","An AST node that is a child of a pattern-match expression.",1],["PatternLiteral","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/PatternLiteral.html","","Represents a literal (exact-match) portion of a pattern",1],["PatternWildcard","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/PatternWildcard.html","","Represents the actual wildcard portion of a pattern",1],["Tag","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/Tag.html"," < AbstractExpression","An AST node that represents a literal tag expression.",1],["VisitorInterface","Icecave\\Dialekt\\AST","Icecave\/Dialekt\/AST\/VisitorInterface.html","","Interface for node visitors.",1],["EvaluationResult","Icecave\\Dialekt\\Evaluator","Icecave\/Dialekt\/Evaluator\/EvaluationResult.html","","The overall result of the evaluation of an expression.",1],["Evaluator","Icecave\\Dialekt\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html","","",1],["EvaluatorInterface","Icecave\\Dialekt\\Evaluator","Icecave\/Dialekt\/Evaluator\/EvaluatorInterface.html","","Interface for expression evaluators.",1],["ExpressionResult","Icecave\\Dialekt\\Evaluator","Icecave\/Dialekt\/Evaluator\/ExpressionResult.html","","The result for an invidiual expression in the AST.",1],["PackageInfo","Icecave\\Dialekt","Icecave\/Dialekt\/PackageInfo.html","","",1],["AbstractParser","Icecave\\Dialekt\\Parser","Icecave\/Dialekt\/Parser\/AbstractParser.html","","",1],["ParseException","Icecave\\Dialekt\\Parser\\Exception","Icecave\/Dialekt\/Parser\/Exception\/ParseException.html"," < Exception","",1],["ExpressionParser","Icecave\\Dialekt\\Parser","Icecave\/Dialekt\/Parser\/ExpressionParser.html"," < AbstractParser","",1],["Lexer","Icecave\\Dialekt\\Parser","Icecave\/Dialekt\/Parser\/Lexer.html","","",1],["LexerInterface","Icecave\\Dialekt\\Parser","Icecave\/Dialekt\/Parser\/LexerInterface.html","","",1],["ListParser","Icecave\\Dialekt\\Parser","Icecave\/Dialekt\/Parser\/ListParser.html"," < AbstractParser","Parses a list of tags.",1],["ParserInterface","Icecave\\Dialekt\\Parser","Icecave\/Dialekt\/Parser\/ParserInterface.html","","",1],["Token","Icecave\\Dialekt\\Parser","Icecave\/Dialekt\/Parser\/Token.html","","",1],["RenderException","Icecave\\Dialekt\\Renderer\\Exception","Icecave\/Dialekt\/Renderer\/Exception\/RenderException.html"," < Exception","",1],["ExpressionRenderer","Icecave\\Dialekt\\Renderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html","","Renders an AST expression to an expression string.",1],["RendererInterface","Icecave\\Dialekt\\Renderer","Icecave\/Dialekt\/Renderer\/RendererInterface.html","","",1],["TreeRenderer","Icecave\\Dialekt\\Renderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html","","Render an AST expression to a string representing the",1],["AbstractExpression::source","Icecave\\Dialekt\\AST\\AbstractExpression","Icecave\/Dialekt\/AST\/AbstractExpression.html#method_source","()","Fetch the original source code of this expression.",2],["AbstractExpression::sourceOffset","Icecave\\Dialekt\\AST\\AbstractExpression","Icecave\/Dialekt\/AST\/AbstractExpression.html#method_sourceOffset","()","Fetch the index of the first character of this expression",2],["AbstractExpression::hasSource","Icecave\\Dialekt\\AST\\AbstractExpression","Icecave\/Dialekt\/AST\/AbstractExpression.html#method_hasSource","()","Indiciates whether or not the expression contains information",2],["AbstractExpression::setSource","Icecave\\Dialekt\\AST\\AbstractExpression","Icecave\/Dialekt\/AST\/AbstractExpression.html#method_setSource","(string $source, integer $sourceOffset)","Set the original source code of this expression.",2],["AbstractPolyadicExpression::__construct","Icecave\\Dialekt\\AST\\AbstractPolyadicExpression","Icecave\/Dialekt\/AST\/AbstractPolyadicExpression.html#method___construct","()","",2],["AbstractPolyadicExpression::add","Icecave\\Dialekt\\AST\\AbstractPolyadicExpression","Icecave\/Dialekt\/AST\/AbstractPolyadicExpression.html#method_add","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression)","Add a child expression to this operator.",2],["AbstractPolyadicExpression::children","Icecave\\Dialekt\\AST\\AbstractPolyadicExpression","Icecave\/Dialekt\/AST\/AbstractPolyadicExpression.html#method_children","()","Fetch an array of this operator's children.",2],["EmptyExpression::accept","Icecave\\Dialekt\\AST\\EmptyExpression","Icecave\/Dialekt\/AST\/EmptyExpression.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["ExpressionInterface::source","Icecave\\Dialekt\\AST\\ExpressionInterface","Icecave\/Dialekt\/AST\/ExpressionInterface.html#method_source","()","Fetch the original source code of this expression.",2],["ExpressionInterface::sourceOffset","Icecave\\Dialekt\\AST\\ExpressionInterface","Icecave\/Dialekt\/AST\/ExpressionInterface.html#method_sourceOffset","()","Fetch the index of the first character of this expression",2],["ExpressionInterface::hasSource","Icecave\\Dialekt\\AST\\ExpressionInterface","Icecave\/Dialekt\/AST\/ExpressionInterface.html#method_hasSource","()","Indiciates whether or not the expression contains information",2],["LogicalAnd::accept","Icecave\\Dialekt\\AST\\LogicalAnd","Icecave\/Dialekt\/AST\/LogicalAnd.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["LogicalNot::__construct","Icecave\\Dialekt\\AST\\LogicalNot","Icecave\/Dialekt\/AST\/LogicalNot.html#method___construct","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $child)","",2],["LogicalNot::child","Icecave\\Dialekt\\AST\\LogicalNot","Icecave\/Dialekt\/AST\/LogicalNot.html#method_child","()","Fetch the expression being inverted by the NOT operator.",2],["LogicalNot::accept","Icecave\\Dialekt\\AST\\LogicalNot","Icecave\/Dialekt\/AST\/LogicalNot.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["LogicalOr::accept","Icecave\\Dialekt\\AST\\LogicalOr","Icecave\/Dialekt\/AST\/LogicalOr.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["NodeInterface::accept","Icecave\\Dialekt\\AST\\NodeInterface","Icecave\/Dialekt\/AST\/NodeInterface.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["Pattern::__construct","Icecave\\Dialekt\\AST\\Pattern","Icecave\/Dialekt\/AST\/Pattern.html#method___construct","()","",2],["Pattern::add","Icecave\\Dialekt\\AST\\Pattern","Icecave\/Dialekt\/AST\/Pattern.html#method_add","(<a href=\"Icecave\/Dialekt\/AST\/PatternChildInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternChildInterface\">PatternChildInterface<\/abbr><\/a> $child)","Add a child to this node.",2],["Pattern::children","Icecave\\Dialekt\\AST\\Pattern","Icecave\/Dialekt\/AST\/Pattern.html#method_children","()","Fetch an array of this node's children.",2],["Pattern::accept","Icecave\\Dialekt\\AST\\Pattern","Icecave\/Dialekt\/AST\/Pattern.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["PatternLiteral::__construct","Icecave\\Dialekt\\AST\\PatternLiteral","Icecave\/Dialekt\/AST\/PatternLiteral.html#method___construct","(string $string)","",2],["PatternLiteral::string","Icecave\\Dialekt\\AST\\PatternLiteral","Icecave\/Dialekt\/AST\/PatternLiteral.html#method_string","()","Fetch the string to be matched.",2],["PatternLiteral::accept","Icecave\\Dialekt\\AST\\PatternLiteral","Icecave\/Dialekt\/AST\/PatternLiteral.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["PatternWildcard::accept","Icecave\\Dialekt\\AST\\PatternWildcard","Icecave\/Dialekt\/AST\/PatternWildcard.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["Tag::__construct","Icecave\\Dialekt\\AST\\Tag","Icecave\/Dialekt\/AST\/Tag.html#method___construct","(string $name)","",2],["Tag::name","Icecave\\Dialekt\\AST\\Tag","Icecave\/Dialekt\/AST\/Tag.html#method_name","()","Fetch the tag name.",2],["Tag::accept","Icecave\\Dialekt\\AST\\Tag","Icecave\/Dialekt\/AST\/Tag.html#method_accept","(<a href=\"Icecave\/Dialekt\/AST\/VisitorInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\VisitorInterface\">VisitorInterface<\/abbr><\/a> $visitor)","Pass this node to the appropriate method on the given",2],["VisitorInterface::visitLogicalAnd","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitLogicalAnd","(<a href=\"Icecave\/Dialekt\/AST\/LogicalAnd.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalAnd\">LogicalAnd<\/abbr><\/a> $node)","Visit a LogicalAnd node.",2],["VisitorInterface::visitLogicalOr","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitLogicalOr","(<a href=\"Icecave\/Dialekt\/AST\/LogicalOr.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalOr\">LogicalOr<\/abbr><\/a> $node)","Visit a LogicalOr node.",2],["VisitorInterface::visitLogicalNot","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitLogicalNot","(<a href=\"Icecave\/Dialekt\/AST\/LogicalNot.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalNot\">LogicalNot<\/abbr><\/a> $node)","Visit a LogicalNot node.",2],["VisitorInterface::visitTag","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitTag","(<a href=\"Icecave\/Dialekt\/AST\/Tag.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Tag\">Tag<\/abbr><\/a> $node)","Visit a Tag node.",2],["VisitorInterface::visitPattern","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitPattern","(<a href=\"Icecave\/Dialekt\/AST\/Pattern.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Pattern\">Pattern<\/abbr><\/a> $node)","Visit a pattern node.",2],["VisitorInterface::visitPatternLiteral","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitPatternLiteral","(<a href=\"Icecave\/Dialekt\/AST\/PatternLiteral.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternLiteral\">PatternLiteral<\/abbr><\/a> $node)","Visit a PatternLiteral node.",2],["VisitorInterface::visitPatternWildcard","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitPatternWildcard","(<a href=\"Icecave\/Dialekt\/AST\/PatternWildcard.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternWildcard\">PatternWildcard<\/abbr><\/a> $node)","Visit a PatternWildcard node.",2],["VisitorInterface::visitEmptyExpression","Icecave\\Dialekt\\AST\\VisitorInterface","Icecave\/Dialekt\/AST\/VisitorInterface.html#method_visitEmptyExpression","(<a href=\"Icecave\/Dialekt\/AST\/EmptyExpression.html\"><abbr title=\"Icecave\\Dialekt\\AST\\EmptyExpression\">EmptyExpression<\/abbr><\/a> $node)","Visit a EmptyExpression node.",2],["EvaluationResult::__construct","Icecave\\Dialekt\\Evaluator\\EvaluationResult","Icecave\/Dialekt\/Evaluator\/EvaluationResult.html#method___construct","(boolean $isMatch, array $expressionResults)","",2],["EvaluationResult::isMatch","Icecave\\Dialekt\\Evaluator\\EvaluationResult","Icecave\/Dialekt\/Evaluator\/EvaluationResult.html#method_isMatch","()","Indicates whether or not the expression matched the",2],["EvaluationResult::resultOf","Icecave\\Dialekt\\Evaluator\\EvaluationResult","Icecave\/Dialekt\/Evaluator\/EvaluationResult.html#method_resultOf","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression)","Fetch the result for an individual expression node",2],["Evaluator::__construct","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method___construct","(boolean $caseSensitive = false, boolean $emptyIsWildcard = false)","",2],["Evaluator::evaluate","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_evaluate","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression, <abbr title=\"Icecave\\Dialekt\\Evaluator\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $tags)","Evaluate an expression against a set of tags.",2],["Evaluator::visitLogicalAnd","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitLogicalAnd","(<a href=\"Icecave\/Dialekt\/AST\/LogicalAnd.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalAnd\">LogicalAnd<\/abbr><\/a> $node)","Visit a LogicalAnd node.",2],["Evaluator::visitLogicalOr","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitLogicalOr","(<a href=\"Icecave\/Dialekt\/AST\/LogicalOr.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalOr\">LogicalOr<\/abbr><\/a> $node)","Visit a LogicalOr node.",2],["Evaluator::visitLogicalNot","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitLogicalNot","(<a href=\"Icecave\/Dialekt\/AST\/LogicalNot.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalNot\">LogicalNot<\/abbr><\/a> $node)","Visit a LogicalNot node.",2],["Evaluator::visitTag","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitTag","(<a href=\"Icecave\/Dialekt\/AST\/Tag.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Tag\">Tag<\/abbr><\/a> $node)","Visit a Tag node.",2],["Evaluator::visitPattern","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitPattern","(<a href=\"Icecave\/Dialekt\/AST\/Pattern.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Pattern\">Pattern<\/abbr><\/a> $node)","Visit a pattern node.",2],["Evaluator::visitPatternLiteral","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitPatternLiteral","(<a href=\"Icecave\/Dialekt\/AST\/PatternLiteral.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternLiteral\">PatternLiteral<\/abbr><\/a> $node)","Visit a PatternLiteral node.",2],["Evaluator::visitPatternWildcard","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitPatternWildcard","(<a href=\"Icecave\/Dialekt\/AST\/PatternWildcard.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternWildcard\">PatternWildcard<\/abbr><\/a> $node)","Visit a PatternWildcard node.",2],["Evaluator::visitEmptyExpression","Icecave\\Dialekt\\Evaluator\\Evaluator","Icecave\/Dialekt\/Evaluator\/Evaluator.html#method_visitEmptyExpression","(<a href=\"Icecave\/Dialekt\/AST\/EmptyExpression.html\"><abbr title=\"Icecave\\Dialekt\\AST\\EmptyExpression\">EmptyExpression<\/abbr><\/a> $node)","Visit a EmptyExpression node.",2],["EvaluatorInterface::evaluate","Icecave\\Dialekt\\Evaluator\\EvaluatorInterface","Icecave\/Dialekt\/Evaluator\/EvaluatorInterface.html#method_evaluate","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression, <abbr title=\"Icecave\\Dialekt\\Evaluator\\mixed&lt;string&gt;\">mixed&lt;string&gt;<\/abbr> $tags)","Evaluate an expression against a set of tags.",2],["ExpressionResult::__construct","Icecave\\Dialekt\\Evaluator\\ExpressionResult","Icecave\/Dialekt\/Evaluator\/ExpressionResult.html#method___construct","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression, boolean $isMatch, array $matchedTags, array $unmatchedTags)","",2],["ExpressionResult::expression","Icecave\\Dialekt\\Evaluator\\ExpressionResult","Icecave\/Dialekt\/Evaluator\/ExpressionResult.html#method_expression","()","Fetch the expression to which this result applies.",2],["ExpressionResult::isMatch","Icecave\\Dialekt\\Evaluator\\ExpressionResult","Icecave\/Dialekt\/Evaluator\/ExpressionResult.html#method_isMatch","()","Indicates whether or not the expression matched the",2],["ExpressionResult::matchedTags","Icecave\\Dialekt\\Evaluator\\ExpressionResult","Icecave\/Dialekt\/Evaluator\/ExpressionResult.html#method_matchedTags","()","Fetch the set of tags that matched.",2],["ExpressionResult::unmatchedTags","Icecave\\Dialekt\\Evaluator\\ExpressionResult","Icecave\/Dialekt\/Evaluator\/ExpressionResult.html#method_unmatchedTags","()","Fetch set of tags that did not match.",2],["AbstractParser::__construct","Icecave\\Dialekt\\Parser\\AbstractParser","Icecave\/Dialekt\/Parser\/AbstractParser.html#method___construct","(<a href=\"Icecave\/Dialekt\/Parser\/LexerInterface.html\"><abbr title=\"Icecave\\Dialekt\\Parser\\LexerInterface\">LexerInterface<\/abbr><\/a> $lexer = null)","",2],["AbstractParser::wildcardString","Icecave\\Dialekt\\Parser\\AbstractParser","Icecave\/Dialekt\/Parser\/AbstractParser.html#method_wildcardString","()","Fetch the string to use as a wildcard placeholder.",2],["AbstractParser::setWildcardString","Icecave\\Dialekt\\Parser\\AbstractParser","Icecave\/Dialekt\/Parser\/AbstractParser.html#method_setWildcardString","(string $wildcardString)","Set the string to use as a wildcard placeholder.",2],["AbstractParser::captureSource","Icecave\\Dialekt\\Parser\\AbstractParser","Icecave\/Dialekt\/Parser\/AbstractParser.html#method_captureSource","()","Indicates whether or not the parser captures the expression",2],["AbstractParser::setCaptureSource","Icecave\\Dialekt\\Parser\\AbstractParser","Icecave\/Dialekt\/Parser\/AbstractParser.html#method_setCaptureSource","(boolean $captureSource)","Set whether or not the parser captures the expression",2],["AbstractParser::parse","Icecave\\Dialekt\\Parser\\AbstractParser","Icecave\/Dialekt\/Parser\/AbstractParser.html#method_parse","(string $expression)","Parse an expression.",2],["ExpressionParser::__construct","Icecave\\Dialekt\\Parser\\ExpressionParser","Icecave\/Dialekt\/Parser\/ExpressionParser.html#method___construct","(<a href=\"Icecave\/Dialekt\/Parser\/LexerInterface.html\"><abbr title=\"Icecave\\Dialekt\\Parser\\LexerInterface\">LexerInterface<\/abbr><\/a> $lexer = null)","",2],["ExpressionParser::logicalOrByDefault","Icecave\\Dialekt\\Parser\\ExpressionParser","Icecave\/Dialekt\/Parser\/ExpressionParser.html#method_logicalOrByDefault","()","Indicates whether or not the the default operator should",2],["ExpressionParser::setLogicalOrByDefault","Icecave\\Dialekt\\Parser\\ExpressionParser","Icecave\/Dialekt\/Parser\/ExpressionParser.html#method_setLogicalOrByDefault","(boolean $logicalOrByDefault)","Set whether or not the the default operator should",2],["Lexer::lex","Icecave\\Dialekt\\Parser\\Lexer","Icecave\/Dialekt\/Parser\/Lexer.html#method_lex","(string $expression)","Tokenize an expression.",2],["LexerInterface::lex","Icecave\\Dialekt\\Parser\\LexerInterface","Icecave\/Dialekt\/Parser\/LexerInterface.html#method_lex","(string $expression)","Tokenize an expression.",2],["ListParser::parseAsArray","Icecave\\Dialekt\\Parser\\ListParser","Icecave\/Dialekt\/Parser\/ListParser.html#method_parseAsArray","(string $expression)","Parse a list of tags into an array.",2],["ParserInterface::parse","Icecave\\Dialekt\\Parser\\ParserInterface","Icecave\/Dialekt\/Parser\/ParserInterface.html#method_parse","(string $expression)","Parse an expression.",2],["Token::__construct","Icecave\\Dialekt\\Parser\\Token","Icecave\/Dialekt\/Parser\/Token.html#method___construct","($type, $value, $offset, $length, $line, $column)","",2],["Token::typeDescription","Icecave\\Dialekt\\Parser\\Token","Icecave\/Dialekt\/Parser\/Token.html#method_typeDescription","($type)","",2],["ExpressionRenderer::__construct","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method___construct","(string $wildcardString = null)","",2],["ExpressionRenderer::render","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_render","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression)","Render an expression to a string.",2],["ExpressionRenderer::visitLogicalAnd","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitLogicalAnd","(<a href=\"Icecave\/Dialekt\/AST\/LogicalAnd.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalAnd\">LogicalAnd<\/abbr><\/a> $node)","Visit a LogicalAnd node.",2],["ExpressionRenderer::visitLogicalOr","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitLogicalOr","(<a href=\"Icecave\/Dialekt\/AST\/LogicalOr.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalOr\">LogicalOr<\/abbr><\/a> $node)","Visit a LogicalOr node.",2],["ExpressionRenderer::visitLogicalNot","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitLogicalNot","(<a href=\"Icecave\/Dialekt\/AST\/LogicalNot.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalNot\">LogicalNot<\/abbr><\/a> $node)","Visit a LogicalNot node.",2],["ExpressionRenderer::visitTag","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitTag","(<a href=\"Icecave\/Dialekt\/AST\/Tag.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Tag\">Tag<\/abbr><\/a> $node)","Visit a Tag node.",2],["ExpressionRenderer::visitPattern","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitPattern","(<a href=\"Icecave\/Dialekt\/AST\/Pattern.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Pattern\">Pattern<\/abbr><\/a> $node)","Visit a Pattern node.",2],["ExpressionRenderer::visitPatternLiteral","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitPatternLiteral","(<a href=\"Icecave\/Dialekt\/AST\/PatternLiteral.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternLiteral\">PatternLiteral<\/abbr><\/a> $node)","Visit a PatternLiteral node.",2],["ExpressionRenderer::visitPatternWildcard","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitPatternWildcard","(<a href=\"Icecave\/Dialekt\/AST\/PatternWildcard.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternWildcard\">PatternWildcard<\/abbr><\/a> $node)","Visit a PatternWildcard node.",2],["ExpressionRenderer::visitEmptyExpression","Icecave\\Dialekt\\Renderer\\ExpressionRenderer","Icecave\/Dialekt\/Renderer\/ExpressionRenderer.html#method_visitEmptyExpression","(<a href=\"Icecave\/Dialekt\/AST\/EmptyExpression.html\"><abbr title=\"Icecave\\Dialekt\\AST\\EmptyExpression\">EmptyExpression<\/abbr><\/a> $node)","Visit a EmptyExpression node.",2],["RendererInterface::render","Icecave\\Dialekt\\Renderer\\RendererInterface","Icecave\/Dialekt\/Renderer\/RendererInterface.html#method_render","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression)","Render an expression to a string.",2],["TreeRenderer::render","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_render","(<a href=\"Icecave\/Dialekt\/AST\/ExpressionInterface.html\"><abbr title=\"Icecave\\Dialekt\\AST\\ExpressionInterface\">ExpressionInterface<\/abbr><\/a> $expression)","Render an expression to a string.",2],["TreeRenderer::visitLogicalAnd","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitLogicalAnd","(<a href=\"Icecave\/Dialekt\/AST\/LogicalAnd.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalAnd\">LogicalAnd<\/abbr><\/a> $node)","Visit a LogicalAnd node.",2],["TreeRenderer::visitLogicalOr","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitLogicalOr","(<a href=\"Icecave\/Dialekt\/AST\/LogicalOr.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalOr\">LogicalOr<\/abbr><\/a> $node)","Visit a LogicalOr node.",2],["TreeRenderer::visitLogicalNot","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitLogicalNot","(<a href=\"Icecave\/Dialekt\/AST\/LogicalNot.html\"><abbr title=\"Icecave\\Dialekt\\AST\\LogicalNot\">LogicalNot<\/abbr><\/a> $node)","Visit a LogicalNot node.",2],["TreeRenderer::visitTag","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitTag","(<a href=\"Icecave\/Dialekt\/AST\/Tag.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Tag\">Tag<\/abbr><\/a> $node)","Visit a Tag node.",2],["TreeRenderer::visitPattern","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitPattern","(<a href=\"Icecave\/Dialekt\/AST\/Pattern.html\"><abbr title=\"Icecave\\Dialekt\\AST\\Pattern\">Pattern<\/abbr><\/a> $node)","Visit a Pattern node.",2],["TreeRenderer::visitPatternLiteral","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitPatternLiteral","(<a href=\"Icecave\/Dialekt\/AST\/PatternLiteral.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternLiteral\">PatternLiteral<\/abbr><\/a> $node)","Visit a PatternLiteral node.",2],["TreeRenderer::visitPatternWildcard","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitPatternWildcard","(<a href=\"Icecave\/Dialekt\/AST\/PatternWildcard.html\"><abbr title=\"Icecave\\Dialekt\\AST\\PatternWildcard\">PatternWildcard<\/abbr><\/a> $node)","Visit a PatternWildcard node.",2],["TreeRenderer::visitEmptyExpression","Icecave\\Dialekt\\Renderer\\TreeRenderer","Icecave\/Dialekt\/Renderer\/TreeRenderer.html#method_visitEmptyExpression","(<a href=\"Icecave\/Dialekt\/AST\/EmptyExpression.html\"><abbr title=\"Icecave\\Dialekt\\AST\\EmptyExpression\">EmptyExpression<\/abbr><\/a> $node)","Visit a EmptyExpression node.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']